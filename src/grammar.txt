program             : statement_list

terminator          : SEMICOLON

statement_list      : statement
                    | statement statement_list

statement           : simple_stmt_list
                    | compound_stmt terminator

simple_stmt_list    : simple_stmt
                    | simple_stmt terminator
                    | simple_stmt terminator simple_stmt_list

simple_stmt         : NOOP
                    | CONTINUE
                    | BREAK
                    | goto_stmt
                    | label_stmt
                    | return_stmt
                    | raise_stmt
                    | import_stmt
                    | assignment
                    | function_call

goto_stmt           : GOTO VAR

label_stmt          : LABEL_START VAR

return_stmt         : RETURN comma_values
                    | RETURN

raise_stmt          : RAISE expression

import_stmt         : IMPORT comma_values

assignment          : VAR assignment_operator expression
                    | VARDECL VAR assignment_operator expression
                    | VARDECL VAR type_spec assignment_operator expression

assignment_operator : EQUALS
                    | PLUS_EQUALS
                    | MINUS_EQUALS
                    | MULTIPLY_EQUALS
                    | DIVIDE_EQUALS
                    | POWER_EQUALS
                    | MODULO_EQUALS
                    | INTEGER_DIVIDE_EQUALS
                    | LSHIFT_EQUALS
                    | RSHIFT_EQUALS
                    | BIT_OR_EQUALS
                    | BIT_AND_EQUALS
                    | BIT_XOR_EQUALS

type_spec           : COLON TYPE

compound_stmt       : task_def
                    | class_def
                    | struct_def
                    | control_flow
                    | loop_stmt
                    | try_stmt

block               : statement_list
                    | simple_stmt_list

args                : VAR type_spec
                    | VAR type_spec EQUALS expression
                    | args COMMA args

task_header         : TASK VAR LPAREN RPAREN RARR TYPE DO
                    | TASK VAR LPAREN args RPAREN RARR TYPE DO

extern_task         : EXTERN TASK VAR LPAREN args RPAREN RARR TYPE
                    | EXTERN TASK VAR LPAREN RPAREN RARR TYPE

task_def            : task_header block END
                    | extern_task

task_def_list       : task_def
                    | task_def task_def_list

members             : VAR terminator
                    | VAR type_spec terminator
                    | VAR terminator members
                    | VAR type_spec terminator members

struct_def          : STRUCT VAR NEWLINE members END

class_def           : CLASS VAR NEWLINE members task_def_list END

control_flow        : if_stmt
                    | match_stmt

if_stmt             : IF expression THEN block END
                    | IF expression THEN block elif_stmt
                    | IF expression THEN block ELSE block END

elif_stmt           : ELIF expression THEN block END
                    | ELIF expression THEN block elif_stmt
                    | ELIF expression THEN block ELSE block END

match_stmt          : MATCH expression NEWLINE cases
                    | MATCH expression NEWLINE cases OTHERWISE block

cases               : CASE expression block
                    | CASE expression block cases

loop_stmt           : FOR assignment SEMICOLON expression SEMICOLON expression DO block END
                    | FOR assignment TO expression STEP expression DO block END
                    | FOR assignment TO expression DO block END
                    | WHILE expression DO block END

try_stmt            : TRY block catch_blocks END
                    | TRY block catch_blocks FINALLY block END

catch_blocks        : CATCH VAR block
                    | CATCH VAR block catch_blocks

expression          : disjunction

disjunction         : contravalence
                    | contravalence OR disjunction

contravalence       : conjunction
                    | conjunction XOR contravalence

conjunction         : inversion
                    | inversion AND conjunction

inversion           : NOT inversion
                    | comparison

comparison          : bitwise_or EQEQ comparison
                    | bitwise_or NOTEQ comparison
                    | bitwise_or LTEQ comparison
                    | bitwise_or GTEQ comparison
                    | bitwise_or LT comparison
                    | bitwise_or GT comparison
                    | bitwise_or

bitwise_or          : bitwise_or BIT_OR bitwise_xor
                    | bitwise_xor

bitwise_xor         : bitwise_xor BIT_XOR bitwise_and
                    | bitwise_and

bitwise_and         : bitwise_and BIT_AND shift_expression
                    | shift_expression

shift_expression    : shift_expression LSHIFT sum
                    | shift_expression RSHIFT sum
                    | sum

sum                 : sum PLUS term
                    | sum MINUS term
                    | term

term                : term MULTIPLY factor
                    | term DIVIDE factor
                    | term INTEGER_DIVIDE factor
                    | term MODULO factor
                    | factor

factor              : PLUS factor
                    | MINUS factor
                    | factor INCREMENT
                    | factor DECREMENT
                    | exponentiation

exponentiation      : primary POWER factor
                    | primary

primary             : primary DOT VAR
                    | primary LSQUARE expression RSQUARE
                    | function_call
                    | class_construction
                    | atom
                    | LPAREN expression RPAREN

function_call       : VAR LPAREN RPAREN
                    | VAR LPAREN params RPAREN
                    | primary DOT function_call

class_construction  : NEW VAR LPAREN RPAREN
                    | NEW VAR LPAREN params RPAREN

param               : VAR EQUALS expression
                    | expression

params              : param COMMA params
                    | param

atom                : STRING
                    | CHAR
                    | BOOL
                    | INTEGER
                    | FLOATING_POINT
                    | NULL
                    | VAR
                    | list
                    | tuple
                    | set
                    | map

comma_values        : expression
                    | expression COMMA comma_values

list                : LSQUARE comma_values RSQUARE
                    | LSQUARE RSQUARE

tuple               : LPAREN comma_values RPAREN
                    | LPAREN RPAREN

set                 : LBRACE comma_values RBRACE
                    | LBRACE RBRACE

kvpairs             : expression COLON expression
                    | kvpairs COMMA kvpairs

map                 : LBRACE kvpairs RBRACE
                    | LBRACE RBRACE
