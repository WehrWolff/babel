# This starter workflow is for a Conan-based project running on multiple platforms.
# Itâ€™s less clunky than the CMake multi-platform workflow, simplifying the process by handling dependencies and building the project with just one command.
# This workflow is mainly intended to demonstrate how to manage dependencies and build projects using Conan, and must be triggered manually.
# See: https://github.com/WehrWolff/babel/blob/main/.github/workflows/cmake-multi-platform.yml
name: Conan on multiple platforms

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            conan_compiler: msvc
            compiler_version: 194
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            conan_compiler: gcc
            compiler_version: 14
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            conan_compiler: clang
            compiler_version: 19

        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Install Conan
      run: |
        pip install conan

    - name: Build with Conan
      # Export the C and CXX environment variables to ensure that the correct compiler is used by Conan.
      # [ $RUNNER_OS == "Linux" ] && export C=${{ matrix.c_compiler }} CXX=${{ matrix.cpp_compiler }}
      # shell: bash
      run: |
        conan profile detect --exist-ok
        conan create . --build=missing --settings=compiler=${{ matrix.conan_compiler }} --settings=compiler.version=${{ matrix.compiler_version }} --settings=compiler.cppstd=20 --settings=build_type=${{ matrix.build_type }} --options='&:c_compiler=${{ matrix.c_compiler }}' --options='&:cxx_compiler=${{ matrix.cxx_compiler }}' --settings=compiler.libcxx=libstdc++ -c tools.system.package_manager:mode=install

    - name: Get coverage
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      
      run: |
        cmake --build . --target coverage

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
