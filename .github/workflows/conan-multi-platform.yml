# This starter workflow is for a Conan-based project running on multiple platforms.
# Itâ€™s less clunky than the CMake multi-platform workflow, simplifying the process by handling dependencies and building the project with just one command.
# This workflow is mainly intended to demonstrate how to manage dependencies and build projects using Conan, and must be triggered manually.
# See: https://github.com/WehrWolff/babel/blob/main/.github/workflows/cmake-multi-platform.yml
name: Conan on multiple platforms

on:
  workflow_dispatch:

jobs:
  build:
    # These permissions are needed to delete old caches.
    permissions:
      actions: write
      contents: read
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            conan_compiler: msvc
            compiler_version: 194
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            conan_compiler: gcc
            compiler_version: 14
            libcxx: --settings=compiler.libcxx=libstdc++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            conan_compiler: clang
            compiler_version: 19
            libcxx: --settings=compiler.libcxx=libstdc++

        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Install Conan
      run: |
        pip install conan

    - name: Restore Cached Conan packages
      uses: actions/cache/restore@v4
      with:
        path: ~/.conan2
        key: ${{ runner.os }}-conan-${{ matrix.conan_compiler }}${{ matrix.compiler_version }}-${{ hashFiles('conanfile.py', 'CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-conan-${{ matrix.conan_compiler }}${{ matrix.compiler_version }}-
          ${{ runner.os }}-conan-${{ matrix.conan_compiler }}
          ${{ runner.os }}-conan-

    - name: Build with Conan
      # Export the CC and CXX environment variables to ensure that the correct compiler is used by Conan.
      shell: bash
      run: |
        [ $RUNNER_OS == "Linux" ] && export CC=${{ matrix.c_compiler }} CXX=${{ matrix.cpp_compiler }}
        conan profile detect --exist-ok
        conan build . --output-folder=./build --build=missing --settings=compiler=${{ matrix.conan_compiler }} --settings=compiler.version=${{ matrix.compiler_version }} --settings=compiler.cppstd=20 --settings=build_type=${{ matrix.build_type }} ${{ matrix.libcxx }} -o "&:gen_coverage=True" -c tools.system.package_manager:mode=install -c tools.system.package_manager:sudo=True

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    # Delete the old cache on hit to emulate a cache update.
    # See https://github.com/actions/cache/issues/342.
    - name: Delete old cache
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: steps.cache-restore.outputs.cache-hit
      # Using `--repo` makes it so that this step doesn't require checking out the repo first.
      run: gh cache delete --repo ${{ github.repository }} ${{ steps.cache-restore.outputs.cache-primary-key }}

    - name: Clean cache
      run: |
        conan cache clean "*" --build --source --temp
        conan remove "*" --lru=1d --confirm

    - name: Save cache
      uses: actions/cache/save@v4
      # Save the cache even if build steps fail.
      if: always()
      with:
        path: ~/.conan2
        key: ${{ steps.cache.outputs.cache-primary-key }}
